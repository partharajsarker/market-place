// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String?
  image         String?
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Role-based fields
  role          UserRole  @default(CUSTOMER)
  
  // Customer fields
  phone         String?
  dateOfBirth   DateTime?
  addresses     Address[]
  orders        Order[]
  reviews       Review[]
  cartItems     CartItem[]
  wishlist      WishlistItem[]
  
  // Vendor fields
  vendor        Vendor?
  
  // Admin fields
  admin         Admin?

  // NextAuth fields
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

enum UserRole {
  ADMIN
  VENDOR
  CUSTOMER
}

model Vendor {
  id              String   @id @default(cuid())
  userId          String   @unique
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Business info
  businessName    String
  businessType    String
  description     String?
  logo            String?
  banner          String?
  
  // KYC & Verification
  isVerified      Boolean  @default(false)
  isApproved      Boolean  @default(false)
  kycDocuments    String[] // Array of document URLs
  
  // Bank & Payment
  bankName        String?
  accountNumber   String?
  routingNumber   String?
  stripeAccountId String?
  
  // Contact
  phone           String?
  website         String?
  socialMedia     Json?    // Instagram, Facebook, etc.
  
  // Location
  address         String?
  city            String?
  state           String?
  country         String?
  zipCode         String?
  
  // Stats
  rating          Float    @default(0)
  totalSales      Int      @default(0)
  totalOrders     Int      @default(0)
  
  // Timestamps
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  products        Product[]
  orders         Order[]
  payouts        Payout[]
  commissionRules CommissionRule[]

  @@map("vendors")
}

model Admin {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  permissions String[] // Array of permission strings
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("admins")
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?
  image       String?
  parentId    String?
  parent      Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  
  // SEO
  metaTitle       String?
  metaDescription String?
  
  // Display
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  products   Product[]
  attributes Attribute[]

  @@map("categories")
}

model Attribute {
  id          String   @id @default(cuid())
  name        String
  type        AttributeType
  values      String[] // Array of possible values
  isRequired  Boolean  @default(false)
  isFilterable Boolean @default(false)
  isSearchable Boolean @default(false)
  
  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  productAttributes ProductAttribute[]

  @@map("attributes")
}

enum AttributeType {
  TEXT
  NUMBER
  BOOLEAN
  SELECT
  MULTI_SELECT
  COLOR
  SIZE
}

model Product {
  id          String   @id @default(cuid())
  vendorId    String
  vendor      Vendor   @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  
  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  
  // Basic info
  name        String
  slug        String   @unique
  description String
  shortDescription String?
  
  // Pricing
  basePrice   Float
  salePrice   Float?
  costPrice   Float?
  
  // Inventory
  sku         String?  @unique
  stock       Int      @default(0)
  lowStockThreshold Int @default(5)
  isInStock   Boolean  @default(true)
  
  // Images
  images      String[] // Array of image URLs
  thumbnail   String?
  
  // SEO
  metaTitle       String?
  metaDescription String?
  keywords        String?
  
  // Status
  isActive    Boolean  @default(true)
  isFeatured  Boolean  @default(false)
  isApproved  Boolean  @default(false)
  
  // Stats
  rating      Float    @default(0)
  reviewCount Int      @default(0)
  viewCount   Int      @default(0)
  soldCount   Int      @default(0)
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  variants    ProductVariant[]
  attributes  ProductAttribute[]
  orderItems  OrderItem[]
  reviews     Review[]
  cartItems   CartItem[]
  wishlistItems WishlistItem[]

  @@map("products")
}

model ProductVariant {
  id          String   @id @default(cuid())
  productId   String
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  // Variant details
  name        String   // e.g., "Red, Large"
  sku         String?  @unique
  price       Float?
  costPrice   Float?
  
  // Inventory
  stock       Int      @default(0)
  isInStock   Boolean  @default(true)
  
  // Attributes
  attributes  Json     // e.g., {"color": "red", "size": "L"}
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  orderItems  OrderItem[]
  cartItems   CartItem[]

  @@map("product_variants")
}

model ProductAttribute {
  id          String   @id @default(cuid())
  productId   String
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  attributeId String
  attribute   Attribute @relation(fields: [attributeId], references: [id], onDelete: Cascade)
  
  value       String
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([productId, attributeId])
  @@map("product_attributes")
}

model Order {
  id          String   @id @default(cuid())
  orderNumber String   @unique
  
  // Customer
  customerId  String
  customer    User     @relation(fields: [customerId], references: [id], onDelete: Cascade)
  
  // Vendor
  vendorId    String
  vendor      Vendor   @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  
  // Status
  status      OrderStatus @default(PENDING)
  
  // Pricing
  subtotal   Float
  tax         Float    @default(0)
  shipping    Float    @default(0)
  discount    Float    @default(0)
  total       Float
  
  // Commission
  commissionAmount Float @default(0)
  vendorAmount     Float @default(0)
  
  // Payment
  paymentStatus PaymentStatus @default(PENDING)
  paymentMethod String?
  stripePaymentIntentId String?
  
  // Shipping
  shippingAddressId String
  shippingAddress   Address @relation("ShippingAddress", fields: [shippingAddressId], references: [id])
  
  billingAddressId  String
  billingAddress    Address @relation("BillingAddress", fields: [billingAddressId], references: [id])
  
  // Tracking
  trackingNumber String?
  estimatedDelivery DateTime?
  deliveredAt   DateTime?
  
  // Notes
  customerNotes String?
  vendorNotes   String?
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  items       OrderItem[]
  payouts     Payout[]

  @@map("orders")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  RETURNED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}

model OrderItem {
  id          String   @id @default(cuid())
  orderId     String
  order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  productId   String
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  variantId   String?
  variant     ProductVariant? @relation(fields: [variantId], references: [id])
  
  // Item details
  quantity    Int
  unitPrice   Float
  totalPrice  Float
  
  // Attributes
  attributes  Json?    // Selected attributes for this item
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("order_items")
}

model Review {
  id          String   @id @default(cuid())
  productId   String
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  customerId  String
  customer    User     @relation(fields: [customerId], references: [id], onDelete: Cascade)
  
  orderId     String?  // Optional: can review without order
  
  // Review content
  rating      Int      // 1-5 stars
  title       String?
  comment     String?
  images      String[] // Array of image URLs
  
  // Moderation
  isApproved  Boolean  @default(false)
  isHelpful   Int      @default(0)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([productId, customerId])
  @@map("reviews")
}

model CartItem {
  id          String   @id @default(cuid())
  customerId  String
  customer    User     @relation(fields: [customerId], references: [id], onDelete: Cascade)
  
  productId   String
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  variantId   String?
  variant     ProductVariant? @relation(fields: [variantId], references: [id])
  
  quantity    Int
  attributes  Json?    // Selected attributes
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([customerId, productId, variantId])
  @@map("cart_items")
}

model WishlistItem {
  id          String   @id @default(cuid())
  customerId  String
  customer    User     @relation(fields: [customerId], references: [id], onDelete: Cascade)
  
  productId   String
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime @default(now())

  @@unique([customerId, productId])
  @@map("wishlist_items")
}

model Address {
  id          String   @id @default(cuid())
  customerId  String
  customer    User     @relation(fields: [customerId], references: [id], onDelete: Cascade)
  
  // Address details
  type        AddressType
  firstName   String
  lastName    String
  company     String?
  address1    String
  address2    String?
  city        String
  state       String
  country     String
  zipCode     String
  phone       String?
  
  // Default flags
  isDefaultShipping Boolean @default(false)
  isDefaultBilling  Boolean @default(false)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  shippingOrders Order[] @relation("ShippingAddress")
  billingOrders  Order[] @relation("BillingAddress")

  @@map("addresses")
}

enum AddressType {
  SHIPPING
  BILLING
  BOTH
}

model Payout {
  id          String   @id @default(cuid())
  vendorId    String
  vendor      Vendor   @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  
  orderId     String?
  order       Order?   @relation(fields: [orderId], references: [id])
  
  // Amount
  amount      Float
  fee         Float    @default(0)
  netAmount   Float
  
  // Status
  status      PayoutStatus @default(PENDING)
  
  // Payment method
  method      PayoutMethod
  accountDetails Json? // Bank account or Stripe account details
  
  // Stripe
  stripeTransferId String?
  
  // Timestamps
  requestedAt DateTime @default(now())
  processedAt DateTime?
  
  // Notes
  notes       String?

  @@map("payouts")
}

enum PayoutStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

enum PayoutMethod {
  BANK_TRANSFER
  STRIPE_CONNECT
  PAYPAL
}

model CommissionRule {
  id          String   @id @default(cuid())
  vendorId    String?
  vendor      Vendor?  @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  
  // Rule details
  name        String
  type        CommissionType
  value       Float    // Percentage or fixed amount
  
  // Conditions
  minAmount   Float?
  maxAmount   Float?
  categories  String[] // Array of category IDs
  
  // Status
  isActive    Boolean  @default(true)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("commission_rules")
}

enum CommissionType {
  PERCENTAGE
  FIXED_AMOUNT
  TIERED
}
